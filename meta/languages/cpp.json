{
  "meta": {
    "keyword": "throw new delete return false int float while private char catch export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const struct for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using true class asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue wchar_t inline delete alignof char16_t char32_t constexpr decltype noexcept nullptr static_assert thread_local restrict _Bool complex _Complex _Imaginary intmax_t uintmax_t int8_t uint8_t int16_t uint16_t int32_t uint32_t  int64_t uint64_t int_least8_t uint_least8_t int_least16_t uint_least16_t int_least32_t uint_least32_t int_least64_t uint_least64_t int_fast8_t uint_fast8_t int_fast16_t uint_fast16_t int_fast32_t uint_fast32_t int_fast64_t uint_fast64_t intptr_t uintptr_t atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong atomic_wchar_t atomic_char16_t atomic_char32_t atomic_intmax_t atomic_uintmax_t atomic_intptr_t atomic_uintptr_t atomic_size_t atomic_ptrdiff_t atomic_int_least8_t atomic_int_least16_t atomic_int_least32_t atomic_int_least64_t atomic_uint_least8_t atomic_uint_least16_t atomic_uint_least32_t atomic_uint_least64_t atomic_int_fast8_t atomic_int_fast16_t atomic_int_fast32_t atomic_int_fast64_t atomic_uint_fast8_t atomic_uint_fast16_t atomic_uint_fast32_t atomic_uint_fast64_t static_cast dynamic_cast const_cast reinterpret_cast override",
    "built_in": "std string cin cout cerr clog stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf unique_ptr"
  },
  "syntax": {
    "pairs": [
      { "open": 1, "close": 2 },
      { "open": 3, "close": 4 },
      { "open": 5, "close": 6 }
    ],
    "single_line_comment": "//"
  },
  "root": {
    "illegal": "</",
    "contains": [
      { "className": "operator", "begin": "\\{", "extra": 1 },
      { "className": "operator", "begin": "\\}", "extra": 2 },
      { "className": "operator", "begin": "\\(", "extra": 3 },
      { "className": "operator", "begin": "\\)", "extra": 4 },
      { "className": "operator", "begin": "\\[", "extra": 5 },
      { "className": "operator", "begin": "\\]", "extra": 6 },
      {
        "className": "ident",
        "begin": "[a-zA-Z_]\\w*"
      },
      {
        "className": "comment",
        "begin": "//",
        "end": "$"
      },
      {
        "className": "comment",
        "begin": "/\\*",
        "end": "\\*/"
      },
      {
        "className": "string",
        "begin": "\"",
        "end": "\"",
        "illegal": "\\n",
        "contains": [
          {
            "begin": "\\\\[\\s\\S]"
          }
        ]
      },
      {
        "className": "string",
        "begin": "'\\\\?.",
        "end": "'",
        "illegal": "."
      },
      {
        "className": "number",
        "begin": "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"
      },
      {
        "className": "number",
        "begin": "\\b(0[xX][a-fA-F0-9]+|(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)"
      },
      {
        "className": "preprocessor",
        "begin": "#",
        "end": "$",
        "contains": [
          {
            "begin": "include\\s*[<\"]",
            "end": "[>\"]",
            "illegal": "\\n"
          },
          {
            "className": "comment",
            "begin": "//",
            "end": "$"
          }
        ]
      }
    ]
  }
}